#!/usr/bin/env python
#
#  Log information about incoming SMTP connections.
#
#  Copyright (c) 2004-2007, Sean Reifschneider, tummy.com, ltd.
#  All Rights Reserved
#  <jafo@tummy.com>
#
#  Jan Schrewe <jan@schafproductions.com>, 2012

import sys

from time import time
from spf import check2 as spf_check

try:
    from ipaddr import ip_address
except ImportError:
    # No PEP 3144 interface yet. Fall back.
    from ipaddr import IPAddress
    ip_address = IPAddress

from tumgreyspfsupp import prepare_start, DataDict, ParseException, InstanceCheck

# read config and prepare for start up
config = prepare_start(use_syslog=True, use_stderr=False)


def skip_ip(ip, ipaddrs):
    try:
        ip = ip_address(ip)
    except ValueError:
        return False
    
    for net in ipaddrs:
        if ip in net:
            return True
    return False


def spfcheck(data, config):
    queue_id = 'QUEUE_ID="%s"' % data.get('queue_id')
    
    try:
        ip = data['client_address']
    except KeyError:
        config.log_msg('spfcheck: No client address, exiting', 1)
        return (None, None)
    
    if skip_ip(ip, config['spfWhiteList']):
        detail = 'REMOTEIP="%s" HELO="%s" SENDER="%s" RECIPIENT="%s" QUEUEID="%s"' % (
            data.get('client_address'),
            data.get('helo_name'),
            data.get('sender'),
            data.get('recipient'),
            data.get('queue_id'),
        )
        config.log_msg("Whitelisted (spf check): %s" % detail)
        return (None, 'SPF check N/A for whitelisted connections')

    try:
        sender = data['sender']
        identity = 'mailfrom'
    except KeyError:
        sender = None
        identity = 'helo'
    
    try:
        helo = data['helo_name']
    except KeyError:
        if sender is None:
            config.log_msg('spfcheck: No sender or helo, exiting', 1)
            return (None, None)
        #  if no helo name sent, use domain from sender
        parts = sender.split('@', 1)
        try:
            helo = parts[1]
        except IndexError:
            helo = 'unknown'

    #  use the pySPF 2.0/RFC 4408 interface
    try:
        spf_result, spf_reason = spf_check(i=ip, s=sender, h=helo)
    except Exception as e:
        return ('prepend', 'TumGreySPF-Warning: SPF Check failed: %s' % e)

    spf_result = spf_result.strip().lower().capitalize()
    spf_reason = spf_reason.strip()
        
    if spf_result == 'None':
        #  allow checking to continue on to other checkers if no SPF
        return (None, None)
        
    spf_detail = 'identity=%s; client-ip=%s; helo=%s; envelope-from=%s; receiver=%s; ' % (
        identity,
        data.get('client_address'),
        data.get('helo_name'),
        data.get('sender'),
        data.get('recipient'),
    )
    config.log_msg('%s: %s; %s' % (spf_reason, queue_id, spf_detail))
    
    spf_report = '%s SPF Reports: %s' % (queue_id, spf_reason)
        
    if spf_result == 'Fail':
        return ('reject', spf_report)

    if spf_result == 'Permerror' and not config['spfAcceptOnPermError']:
        return ('reject', spf_report)

    if spf_result == 'Temperror':
        return ('defer', spf_report)
    
    # SPF validated mails can pass
    if spf_result == 'Pass' and config['spfBypassGreylist']:
        return ('pass', spf_report)

    return ('prepend', 'Received-SPF: %s (%s) %s' % (spf_result, spf_reason, spf_detail))


def greylistcheck(data, config):
    greylist_data = {}
    
    try:
        ip = data['client_address']
    except KeyError:
        return (None, None)
    
    greylist_detail = 'REMOTEIP="%s" HELO="%s" SENDER="%s" RECIPIENT="%s" QUEUEID="%s"' % (
        data.get('client_address'),
        data.get('helo_name'),
        data.get('sender'),
        data.get('recipient'),
        data.get('queue_id'),
    )
    
    # check if client is whitelisted
    if skip_ip(ip, config['greylistWhiteList']):
        config.log_msg("Whitelisted (greylist check): %s" % greylist_detail)
        return (None, 'greylist check N/A for whitelisted connections') 
    
    if config['ignoreLastByte']:
        ip_bytes = ip.split('.') 
        ip_bytes[-1] = '0'
        ip = '.'.join(ip_bytes)
    
    greylist_data['ip'] = int(ip_address(ip))
    
    if not config['greylistByIPOnly']:
        try:
            greylist_data['sender'] = data['sender']
            greylist_data['recipient'] = data['recipient']
        except KeyError:
            return (None, None)

    criteria = greylist_data.copy()
    db_data = config.db.greylist.find(criteria)
    
    # meta data used to generate stats
    greylist_data['client_ip'] = int(ip_address(data['client_address']))

    if db_data.count() == 0: 
        greylist_data['changed'] = time()
        greylist_data['allowed_from'] = greylist_data['changed'] + config['GREYLISTTIME']
        
        # ensure there are no races in case data got inserted between check and now
        config.db.greylist.update(criteria, {"$set": greylist_data}, upsert=True)

        if config['defaultSeedOnly']:
            config.log_msg('Training greylisting: %s' %  greylist_detail)
            return (None, None)

        config.log_msg('Initial greylisting: %s' %  greylist_detail)
        return ('defer', 'Service unavailable, greylisted (http://projects.puremagic.com/greylisting/).')

    # we only allow one entry per search
    db_data = db_data[0]
    
    now = time()
    
    config.db.greylist.update({'_id': db_data['_id']}, {"$set": {'changed': now}}, upsert=True)
    
    if db_data['allowed_from'] > now and not config['defaultSeedOnly']:
        config.log_msg('Pending greylisting: %s' %  greylist_detail)
        return ('defer', 'Service unavailable, greylisted (http://projects.puremagic.com/greylisting/).')

    config.log_msg('Allowed greylisting: %s' %  greylist_detail)
    return (None, None)


def blackholecheck(data, config):
    try:
        ip = data['client_address']
        ip = int(ip_address(ip))
    except KeyError:
        return (None, None)
    
    try:
        recipient = data['recipient']
    except KeyError:
        return (None, None)
    
    ip_data = {'ip': ip,}
    
    # check if mail goes to a "forbidden" address
    db_adresses = config.db.blackhole_adresses.find({'address': recipient,})
    if db_adresses.count() > 0:
        # if it does then blacklist sender
        config.db.blackhole_ips.update(ip_data, ip_data, upsert=True)

    # finally check if sender is blocked
    if config.db.blackhole_ips.find(ip_data).count() > 0:
        config.log_msg('Blackholed: REMOTEIP="%s" HELO="%s" SENDER="%s" RECIPIENT="%s" QUEUEID="%s"' % (
                data.get('client_address'),
                data.get('helo_name'),
                data.get('sender'),
                data.get('recipient'),
                data.get('queue_id'),)
        )
        return ('reject', 'Service unavailable, blackholed.')

    return (None, None)


config.log_msg('Starting', 2)
    
instance_seen = InstanceCheck()
data = DataDict()

while 1:
    line = sys.stdin.readline()
    
    # exit if <STRG>-D is received
    if not line: 
        break
    
    line = line.rstrip()
    config.log_msg('Read line: "%s"' % line, 4)

    if line is '':
        config.log_msg('Found the end of entry', 4)

        checker_val = None
        checker_reason = None
        for checker in config['checkers']:
            if checker == 'greylist':
                checker_val, checker_reason = greylistcheck(data, config)
                if checker_val is not None: 
                    break
            elif checker == 'spf':
                checker_val, checker_reason = spfcheck(data, config)
                if config['spfSeedOnly']:
                    checker_val, checker_reason = None, None
                if checker_val is not None and checker_val != 'prepend': 
                    break
            elif checker == 'blackhole':
                checker_val, checker_reason = blackholecheck(data, config)
                if checker_val is not None: 
                    break

        if checker_val == 'reject':
            print 'action=550 %s\n\n' % checker_reason
            
        # Only prepend data if instance has not been seen.
        elif checker_val == 'prepend' and not instance_seen(data):
            print 'action=prepend %s\n\n' % checker_reason
                
        elif checker_val == 'defer':
            print 'action=defer_if_permit %s\n\n' % checker_reason 
               
        else:
            print 'action=dunno\n\n'

        sys.stdout.flush()
        data = DataDict()
        continue

    try:
        data.parse_line(line)
    except ParseException:
        config.log_msg('ERROR: Could not match line "%s"' % line)
